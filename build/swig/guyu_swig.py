# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_guyu_swig', [dirname(__file__)])
        except ImportError:
            import _guyu_swig
            return _guyu_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_guyu_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _guyu_swig = swig_import_helper()
    del swig_import_helper
else:
    import _guyu_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _guyu_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _guyu_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _guyu_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _guyu_swig.high_res_timer_epoch()
class print_data_f(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> print_data_f_sptr

        Return a shared_ptr to a new instance of guyu::print_data_f.

        To avoid accidental use of raw pointers, guyu::print_data_f's constructor is in a private implementation class. guyu::print_data_f::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _guyu_swig.print_data_f_make()

    make = staticmethod(make)
    __swig_destroy__ = _guyu_swig.delete_print_data_f
    __del__ = lambda self: None
print_data_f_swigregister = _guyu_swig.print_data_f_swigregister
print_data_f_swigregister(print_data_f)

def print_data_f_make():
    """
    print_data_f_make() -> print_data_f_sptr

    Return a shared_ptr to a new instance of guyu::print_data_f.

    To avoid accidental use of raw pointers, guyu::print_data_f's constructor is in a private implementation class. guyu::print_data_f::make is the public interface for creating new instances.

    Params: (NONE)
    """
    return _guyu_swig.print_data_f_make()

class print_data_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::guyu::print_data_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::guyu::print_data_f)> self) -> print_data_f_sptr
        __init__(boost::shared_ptr<(gr::guyu::print_data_f)> self, print_data_f p) -> print_data_f_sptr
        """
        this = _guyu_swig.new_print_data_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(print_data_f_sptr self) -> print_data_f"""
        return _guyu_swig.print_data_f_sptr___deref__(self)

    __swig_destroy__ = _guyu_swig.delete_print_data_f_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(print_data_f_sptr self) -> print_data_f_sptr

        Return a shared_ptr to a new instance of guyu::print_data_f.

        To avoid accidental use of raw pointers, guyu::print_data_f's constructor is in a private implementation class. guyu::print_data_f::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _guyu_swig.print_data_f_sptr_make(self)


    def history(self):
        """history(print_data_f_sptr self) -> unsigned int"""
        return _guyu_swig.print_data_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(print_data_f_sptr self, int which, int delay)
        declare_sample_delay(print_data_f_sptr self, unsigned int delay)
        """
        return _guyu_swig.print_data_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(print_data_f_sptr self, int which) -> unsigned int"""
        return _guyu_swig.print_data_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(print_data_f_sptr self) -> int"""
        return _guyu_swig.print_data_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(print_data_f_sptr self) -> double"""
        return _guyu_swig.print_data_f_sptr_relative_rate(self)


    def start(self):
        """start(print_data_f_sptr self) -> bool"""
        return _guyu_swig.print_data_f_sptr_start(self)


    def stop(self):
        """stop(print_data_f_sptr self) -> bool"""
        return _guyu_swig.print_data_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(print_data_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _guyu_swig.print_data_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(print_data_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _guyu_swig.print_data_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(print_data_f_sptr self) -> int"""
        return _guyu_swig.print_data_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(print_data_f_sptr self, int m)"""
        return _guyu_swig.print_data_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(print_data_f_sptr self)"""
        return _guyu_swig.print_data_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(print_data_f_sptr self) -> bool"""
        return _guyu_swig.print_data_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(print_data_f_sptr self, int m)"""
        return _guyu_swig.print_data_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(print_data_f_sptr self) -> int"""
        return _guyu_swig.print_data_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(print_data_f_sptr self, int i) -> long"""
        return _guyu_swig.print_data_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(print_data_f_sptr self, long max_output_buffer)
        set_max_output_buffer(print_data_f_sptr self, int port, long max_output_buffer)
        """
        return _guyu_swig.print_data_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(print_data_f_sptr self, int i) -> long"""
        return _guyu_swig.print_data_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(print_data_f_sptr self, long min_output_buffer)
        set_min_output_buffer(print_data_f_sptr self, int port, long min_output_buffer)
        """
        return _guyu_swig.print_data_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(print_data_f_sptr self, int which) -> float
        pc_input_buffers_full(print_data_f_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.print_data_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(print_data_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(print_data_f_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.print_data_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(print_data_f_sptr self, int which) -> float
        pc_input_buffers_full_var(print_data_f_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.print_data_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(print_data_f_sptr self, int which) -> float
        pc_output_buffers_full(print_data_f_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.print_data_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(print_data_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(print_data_f_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.print_data_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(print_data_f_sptr self, int which) -> float
        pc_output_buffers_full_var(print_data_f_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.print_data_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(print_data_f_sptr self) -> float"""
        return _guyu_swig.print_data_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(print_data_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _guyu_swig.print_data_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(print_data_f_sptr self)"""
        return _guyu_swig.print_data_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(print_data_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _guyu_swig.print_data_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(print_data_f_sptr self) -> int"""
        return _guyu_swig.print_data_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(print_data_f_sptr self) -> int"""
        return _guyu_swig.print_data_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(print_data_f_sptr self, int priority) -> int"""
        return _guyu_swig.print_data_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(print_data_f_sptr self) -> std::string"""
        return _guyu_swig.print_data_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(print_data_f_sptr self) -> std::string"""
        return _guyu_swig.print_data_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(print_data_f_sptr self) -> io_signature_sptr"""
        return _guyu_swig.print_data_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(print_data_f_sptr self) -> io_signature_sptr"""
        return _guyu_swig.print_data_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(print_data_f_sptr self) -> long"""
        return _guyu_swig.print_data_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(print_data_f_sptr self) -> basic_block_sptr"""
        return _guyu_swig.print_data_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(print_data_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _guyu_swig.print_data_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(print_data_f_sptr self) -> std::string"""
        return _guyu_swig.print_data_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(print_data_f_sptr self, std::string name)"""
        return _guyu_swig.print_data_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(print_data_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _guyu_swig.print_data_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(print_data_f_sptr self) -> swig_int_ptr"""
        return _guyu_swig.print_data_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(print_data_f_sptr self) -> swig_int_ptr"""
        return _guyu_swig.print_data_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(print_data_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _guyu_swig.print_data_f_sptr_message_subscribers(self, which_port)

print_data_f_sptr_swigregister = _guyu_swig.print_data_f_sptr_swigregister
print_data_f_sptr_swigregister(print_data_f_sptr)


print_data_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
print_data_f = print_data_f.make;

class myCMA22(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(num_taps, modulus, mu, sps, iter, print_flag):
        """
        make(int num_taps, float modulus, float mu, int sps, int iter, bool print_flag) -> myCMA22_sptr

        Return a shared_ptr to a new instance of guyu::myCMA22.

        To avoid accidental use of raw pointers, guyu::myCMA22's constructor is in a private implementation class. guyu::myCMA22::make is the public interface for creating new instances.

        Params: (num_taps, modulus, mu, sps, iter, print_flag)
        """
        return _guyu_swig.myCMA22_make(num_taps, modulus, mu, sps, iter, print_flag)

    make = staticmethod(make)

    def set_taps(self, taps):
        """
        set_taps(myCMA22 self, pmt_vector_cfloat taps)



        Params: (taps)
        """
        return _guyu_swig.myCMA22_set_taps(self, taps)


    def taps(self):
        """
        taps(myCMA22 self) -> pmt_vector_cfloat



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_taps(self)


    def gain(self):
        """
        gain(myCMA22 self) -> float



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_gain(self)


    def set_gain(self, mu):
        """
        set_gain(myCMA22 self, float mu)



        Params: (mu)
        """
        return _guyu_swig.myCMA22_set_gain(self, mu)


    def modulus(self):
        """
        modulus(myCMA22 self) -> float



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_modulus(self)


    def set_modulus(self, mod):
        """
        set_modulus(myCMA22 self, float mod)



        Params: (mod)
        """
        return _guyu_swig.myCMA22_set_modulus(self, mod)


    def iteration(self):
        """
        iteration(myCMA22 self) -> float



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_iteration(self)


    def set_iteration(self, iter):
        """
        set_iteration(myCMA22 self, float iter)



        Params: (iter)
        """
        return _guyu_swig.myCMA22_set_iteration(self, iter)


    def print_error(self):
        """
        print_error(myCMA22 self) -> gr_complex



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_print_error(self)

    __swig_destroy__ = _guyu_swig.delete_myCMA22
    __del__ = lambda self: None
myCMA22_swigregister = _guyu_swig.myCMA22_swigregister
myCMA22_swigregister(myCMA22)

def myCMA22_make(num_taps, modulus, mu, sps, iter, print_flag):
    """
    myCMA22_make(int num_taps, float modulus, float mu, int sps, int iter, bool print_flag) -> myCMA22_sptr

    Return a shared_ptr to a new instance of guyu::myCMA22.

    To avoid accidental use of raw pointers, guyu::myCMA22's constructor is in a private implementation class. guyu::myCMA22::make is the public interface for creating new instances.

    Params: (num_taps, modulus, mu, sps, iter, print_flag)
    """
    return _guyu_swig.myCMA22_make(num_taps, modulus, mu, sps, iter, print_flag)

class myCMA22_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::guyu::myCMA22)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::guyu::myCMA22)> self) -> myCMA22_sptr
        __init__(boost::shared_ptr<(gr::guyu::myCMA22)> self, myCMA22 p) -> myCMA22_sptr
        """
        this = _guyu_swig.new_myCMA22_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(myCMA22_sptr self) -> myCMA22"""
        return _guyu_swig.myCMA22_sptr___deref__(self)

    __swig_destroy__ = _guyu_swig.delete_myCMA22_sptr
    __del__ = lambda self: None

    def make(self, num_taps, modulus, mu, sps, iter, print_flag):
        """
        make(myCMA22_sptr self, int num_taps, float modulus, float mu, int sps, int iter, bool print_flag) -> myCMA22_sptr

        Return a shared_ptr to a new instance of guyu::myCMA22.

        To avoid accidental use of raw pointers, guyu::myCMA22's constructor is in a private implementation class. guyu::myCMA22::make is the public interface for creating new instances.

        Params: (num_taps, modulus, mu, sps, iter, print_flag)
        """
        return _guyu_swig.myCMA22_sptr_make(self, num_taps, modulus, mu, sps, iter, print_flag)


    def set_taps(self, taps):
        """
        set_taps(myCMA22_sptr self, pmt_vector_cfloat taps)



        Params: (taps)
        """
        return _guyu_swig.myCMA22_sptr_set_taps(self, taps)


    def taps(self):
        """
        taps(myCMA22_sptr self) -> pmt_vector_cfloat



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_sptr_taps(self)


    def gain(self):
        """
        gain(myCMA22_sptr self) -> float



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_sptr_gain(self)


    def set_gain(self, mu):
        """
        set_gain(myCMA22_sptr self, float mu)



        Params: (mu)
        """
        return _guyu_swig.myCMA22_sptr_set_gain(self, mu)


    def modulus(self):
        """
        modulus(myCMA22_sptr self) -> float



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_sptr_modulus(self)


    def set_modulus(self, mod):
        """
        set_modulus(myCMA22_sptr self, float mod)



        Params: (mod)
        """
        return _guyu_swig.myCMA22_sptr_set_modulus(self, mod)


    def iteration(self):
        """
        iteration(myCMA22_sptr self) -> float



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_sptr_iteration(self)


    def set_iteration(self, iter):
        """
        set_iteration(myCMA22_sptr self, float iter)



        Params: (iter)
        """
        return _guyu_swig.myCMA22_sptr_set_iteration(self, iter)


    def print_error(self):
        """
        print_error(myCMA22_sptr self) -> gr_complex



        Params: (NONE)
        """
        return _guyu_swig.myCMA22_sptr_print_error(self)


    def history(self):
        """history(myCMA22_sptr self) -> unsigned int"""
        return _guyu_swig.myCMA22_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(myCMA22_sptr self, int which, int delay)
        declare_sample_delay(myCMA22_sptr self, unsigned int delay)
        """
        return _guyu_swig.myCMA22_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(myCMA22_sptr self, int which) -> unsigned int"""
        return _guyu_swig.myCMA22_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(myCMA22_sptr self) -> int"""
        return _guyu_swig.myCMA22_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(myCMA22_sptr self) -> double"""
        return _guyu_swig.myCMA22_sptr_relative_rate(self)


    def start(self):
        """start(myCMA22_sptr self) -> bool"""
        return _guyu_swig.myCMA22_sptr_start(self)


    def stop(self):
        """stop(myCMA22_sptr self) -> bool"""
        return _guyu_swig.myCMA22_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(myCMA22_sptr self, unsigned int which_input) -> uint64_t"""
        return _guyu_swig.myCMA22_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(myCMA22_sptr self, unsigned int which_output) -> uint64_t"""
        return _guyu_swig.myCMA22_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(myCMA22_sptr self) -> int"""
        return _guyu_swig.myCMA22_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(myCMA22_sptr self, int m)"""
        return _guyu_swig.myCMA22_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(myCMA22_sptr self)"""
        return _guyu_swig.myCMA22_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(myCMA22_sptr self) -> bool"""
        return _guyu_swig.myCMA22_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(myCMA22_sptr self, int m)"""
        return _guyu_swig.myCMA22_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(myCMA22_sptr self) -> int"""
        return _guyu_swig.myCMA22_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(myCMA22_sptr self, int i) -> long"""
        return _guyu_swig.myCMA22_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(myCMA22_sptr self, long max_output_buffer)
        set_max_output_buffer(myCMA22_sptr self, int port, long max_output_buffer)
        """
        return _guyu_swig.myCMA22_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(myCMA22_sptr self, int i) -> long"""
        return _guyu_swig.myCMA22_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(myCMA22_sptr self, long min_output_buffer)
        set_min_output_buffer(myCMA22_sptr self, int port, long min_output_buffer)
        """
        return _guyu_swig.myCMA22_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(myCMA22_sptr self, int which) -> float
        pc_input_buffers_full(myCMA22_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.myCMA22_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(myCMA22_sptr self, int which) -> float
        pc_input_buffers_full_avg(myCMA22_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.myCMA22_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(myCMA22_sptr self, int which) -> float
        pc_input_buffers_full_var(myCMA22_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.myCMA22_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(myCMA22_sptr self, int which) -> float
        pc_output_buffers_full(myCMA22_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.myCMA22_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(myCMA22_sptr self, int which) -> float
        pc_output_buffers_full_avg(myCMA22_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.myCMA22_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(myCMA22_sptr self, int which) -> float
        pc_output_buffers_full_var(myCMA22_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.myCMA22_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(myCMA22_sptr self) -> float"""
        return _guyu_swig.myCMA22_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(myCMA22_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _guyu_swig.myCMA22_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(myCMA22_sptr self)"""
        return _guyu_swig.myCMA22_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(myCMA22_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _guyu_swig.myCMA22_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(myCMA22_sptr self) -> int"""
        return _guyu_swig.myCMA22_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(myCMA22_sptr self) -> int"""
        return _guyu_swig.myCMA22_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(myCMA22_sptr self, int priority) -> int"""
        return _guyu_swig.myCMA22_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(myCMA22_sptr self) -> std::string"""
        return _guyu_swig.myCMA22_sptr_name(self)


    def symbol_name(self):
        """symbol_name(myCMA22_sptr self) -> std::string"""
        return _guyu_swig.myCMA22_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(myCMA22_sptr self) -> io_signature_sptr"""
        return _guyu_swig.myCMA22_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(myCMA22_sptr self) -> io_signature_sptr"""
        return _guyu_swig.myCMA22_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(myCMA22_sptr self) -> long"""
        return _guyu_swig.myCMA22_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(myCMA22_sptr self) -> basic_block_sptr"""
        return _guyu_swig.myCMA22_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(myCMA22_sptr self, int ninputs, int noutputs) -> bool"""
        return _guyu_swig.myCMA22_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(myCMA22_sptr self) -> std::string"""
        return _guyu_swig.myCMA22_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(myCMA22_sptr self, std::string name)"""
        return _guyu_swig.myCMA22_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(myCMA22_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _guyu_swig.myCMA22_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(myCMA22_sptr self) -> swig_int_ptr"""
        return _guyu_swig.myCMA22_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(myCMA22_sptr self) -> swig_int_ptr"""
        return _guyu_swig.myCMA22_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(myCMA22_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _guyu_swig.myCMA22_sptr_message_subscribers(self, which_port)

myCMA22_sptr_swigregister = _guyu_swig.myCMA22_sptr_swigregister
myCMA22_sptr_swigregister(myCMA22_sptr)


myCMA22_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
myCMA22 = myCMA22.make;

class my_DQPSK_Demod(object):
    """Proxy of C++ gr::guyu::my_DQPSK_Demod class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> my_DQPSK_Demod_sptr"""
        return _guyu_swig.my_DQPSK_Demod_make()

    make = staticmethod(make)
    __swig_destroy__ = _guyu_swig.delete_my_DQPSK_Demod
    __del__ = lambda self: None
my_DQPSK_Demod_swigregister = _guyu_swig.my_DQPSK_Demod_swigregister
my_DQPSK_Demod_swigregister(my_DQPSK_Demod)

def my_DQPSK_Demod_make():
    """my_DQPSK_Demod_make() -> my_DQPSK_Demod_sptr"""
    return _guyu_swig.my_DQPSK_Demod_make()

class my_DQPSK_Demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::guyu::my_DQPSK_Demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::guyu::my_DQPSK_Demod)> self) -> my_DQPSK_Demod_sptr
        __init__(boost::shared_ptr<(gr::guyu::my_DQPSK_Demod)> self, my_DQPSK_Demod p) -> my_DQPSK_Demod_sptr
        """
        this = _guyu_swig.new_my_DQPSK_Demod_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(my_DQPSK_Demod_sptr self) -> my_DQPSK_Demod"""
        return _guyu_swig.my_DQPSK_Demod_sptr___deref__(self)

    __swig_destroy__ = _guyu_swig.delete_my_DQPSK_Demod_sptr
    __del__ = lambda self: None

    def make(self):
        """make(my_DQPSK_Demod_sptr self) -> my_DQPSK_Demod_sptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_make(self)


    def history(self):
        """history(my_DQPSK_Demod_sptr self) -> unsigned int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(my_DQPSK_Demod_sptr self, int which, int delay)
        declare_sample_delay(my_DQPSK_Demod_sptr self, unsigned int delay)
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(my_DQPSK_Demod_sptr self, int which) -> unsigned int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(my_DQPSK_Demod_sptr self) -> int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(my_DQPSK_Demod_sptr self) -> double"""
        return _guyu_swig.my_DQPSK_Demod_sptr_relative_rate(self)


    def start(self):
        """start(my_DQPSK_Demod_sptr self) -> bool"""
        return _guyu_swig.my_DQPSK_Demod_sptr_start(self)


    def stop(self):
        """stop(my_DQPSK_Demod_sptr self) -> bool"""
        return _guyu_swig.my_DQPSK_Demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(my_DQPSK_Demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _guyu_swig.my_DQPSK_Demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(my_DQPSK_Demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _guyu_swig.my_DQPSK_Demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(my_DQPSK_Demod_sptr self) -> int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(my_DQPSK_Demod_sptr self, int m)"""
        return _guyu_swig.my_DQPSK_Demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(my_DQPSK_Demod_sptr self)"""
        return _guyu_swig.my_DQPSK_Demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(my_DQPSK_Demod_sptr self) -> bool"""
        return _guyu_swig.my_DQPSK_Demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(my_DQPSK_Demod_sptr self, int m)"""
        return _guyu_swig.my_DQPSK_Demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(my_DQPSK_Demod_sptr self) -> int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(my_DQPSK_Demod_sptr self, int i) -> long"""
        return _guyu_swig.my_DQPSK_Demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(my_DQPSK_Demod_sptr self, long max_output_buffer)
        set_max_output_buffer(my_DQPSK_Demod_sptr self, int port, long max_output_buffer)
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(my_DQPSK_Demod_sptr self, int i) -> long"""
        return _guyu_swig.my_DQPSK_Demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(my_DQPSK_Demod_sptr self, long min_output_buffer)
        set_min_output_buffer(my_DQPSK_Demod_sptr self, int port, long min_output_buffer)
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(my_DQPSK_Demod_sptr self, int which) -> float
        pc_input_buffers_full(my_DQPSK_Demod_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(my_DQPSK_Demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(my_DQPSK_Demod_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(my_DQPSK_Demod_sptr self, int which) -> float
        pc_input_buffers_full_var(my_DQPSK_Demod_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(my_DQPSK_Demod_sptr self, int which) -> float
        pc_output_buffers_full(my_DQPSK_Demod_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(my_DQPSK_Demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(my_DQPSK_Demod_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(my_DQPSK_Demod_sptr self, int which) -> float
        pc_output_buffers_full_var(my_DQPSK_Demod_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(my_DQPSK_Demod_sptr self) -> float"""
        return _guyu_swig.my_DQPSK_Demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(my_DQPSK_Demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _guyu_swig.my_DQPSK_Demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(my_DQPSK_Demod_sptr self)"""
        return _guyu_swig.my_DQPSK_Demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(my_DQPSK_Demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _guyu_swig.my_DQPSK_Demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(my_DQPSK_Demod_sptr self) -> int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(my_DQPSK_Demod_sptr self) -> int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(my_DQPSK_Demod_sptr self, int priority) -> int"""
        return _guyu_swig.my_DQPSK_Demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(my_DQPSK_Demod_sptr self) -> std::string"""
        return _guyu_swig.my_DQPSK_Demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(my_DQPSK_Demod_sptr self) -> std::string"""
        return _guyu_swig.my_DQPSK_Demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(my_DQPSK_Demod_sptr self) -> io_signature_sptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(my_DQPSK_Demod_sptr self) -> io_signature_sptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(my_DQPSK_Demod_sptr self) -> long"""
        return _guyu_swig.my_DQPSK_Demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(my_DQPSK_Demod_sptr self) -> basic_block_sptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(my_DQPSK_Demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _guyu_swig.my_DQPSK_Demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(my_DQPSK_Demod_sptr self) -> std::string"""
        return _guyu_swig.my_DQPSK_Demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(my_DQPSK_Demod_sptr self, std::string name)"""
        return _guyu_swig.my_DQPSK_Demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(my_DQPSK_Demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _guyu_swig.my_DQPSK_Demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(my_DQPSK_Demod_sptr self) -> swig_int_ptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(my_DQPSK_Demod_sptr self) -> swig_int_ptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(my_DQPSK_Demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _guyu_swig.my_DQPSK_Demod_sptr_message_subscribers(self, which_port)

my_DQPSK_Demod_sptr_swigregister = _guyu_swig.my_DQPSK_Demod_sptr_swigregister
my_DQPSK_Demod_sptr_swigregister(my_DQPSK_Demod_sptr)


my_DQPSK_Demod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
my_DQPSK_Demod = my_DQPSK_Demod.make;

class my_file_sink(object):
    """Proxy of C++ gr::guyu::my_file_sink class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sample_rate, duration, itemsize, filename, append=False):
        """make(double sample_rate, int duration, size_t itemsize, char const * filename, bool append=False) -> my_file_sink_sptr"""
        return _guyu_swig.my_file_sink_make(sample_rate, duration, itemsize, filename, append)

    make = staticmethod(make)
    __swig_destroy__ = _guyu_swig.delete_my_file_sink
    __del__ = lambda self: None
my_file_sink_swigregister = _guyu_swig.my_file_sink_swigregister
my_file_sink_swigregister(my_file_sink)

def my_file_sink_make(sample_rate, duration, itemsize, filename, append=False):
    """my_file_sink_make(double sample_rate, int duration, size_t itemsize, char const * filename, bool append=False) -> my_file_sink_sptr"""
    return _guyu_swig.my_file_sink_make(sample_rate, duration, itemsize, filename, append)

class my_file_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::guyu::my_file_sink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::guyu::my_file_sink)> self) -> my_file_sink_sptr
        __init__(boost::shared_ptr<(gr::guyu::my_file_sink)> self, my_file_sink p) -> my_file_sink_sptr
        """
        this = _guyu_swig.new_my_file_sink_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(my_file_sink_sptr self) -> my_file_sink"""
        return _guyu_swig.my_file_sink_sptr___deref__(self)

    __swig_destroy__ = _guyu_swig.delete_my_file_sink_sptr
    __del__ = lambda self: None

    def make(self, sample_rate, duration, itemsize, filename, append=False):
        """make(my_file_sink_sptr self, double sample_rate, int duration, size_t itemsize, char const * filename, bool append=False) -> my_file_sink_sptr"""
        return _guyu_swig.my_file_sink_sptr_make(self, sample_rate, duration, itemsize, filename, append)


    def history(self):
        """history(my_file_sink_sptr self) -> unsigned int"""
        return _guyu_swig.my_file_sink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(my_file_sink_sptr self, int which, int delay)
        declare_sample_delay(my_file_sink_sptr self, unsigned int delay)
        """
        return _guyu_swig.my_file_sink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(my_file_sink_sptr self, int which) -> unsigned int"""
        return _guyu_swig.my_file_sink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(my_file_sink_sptr self) -> int"""
        return _guyu_swig.my_file_sink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(my_file_sink_sptr self) -> double"""
        return _guyu_swig.my_file_sink_sptr_relative_rate(self)


    def start(self):
        """start(my_file_sink_sptr self) -> bool"""
        return _guyu_swig.my_file_sink_sptr_start(self)


    def stop(self):
        """stop(my_file_sink_sptr self) -> bool"""
        return _guyu_swig.my_file_sink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(my_file_sink_sptr self, unsigned int which_input) -> uint64_t"""
        return _guyu_swig.my_file_sink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(my_file_sink_sptr self, unsigned int which_output) -> uint64_t"""
        return _guyu_swig.my_file_sink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(my_file_sink_sptr self) -> int"""
        return _guyu_swig.my_file_sink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(my_file_sink_sptr self, int m)"""
        return _guyu_swig.my_file_sink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(my_file_sink_sptr self)"""
        return _guyu_swig.my_file_sink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(my_file_sink_sptr self) -> bool"""
        return _guyu_swig.my_file_sink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(my_file_sink_sptr self, int m)"""
        return _guyu_swig.my_file_sink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(my_file_sink_sptr self) -> int"""
        return _guyu_swig.my_file_sink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(my_file_sink_sptr self, int i) -> long"""
        return _guyu_swig.my_file_sink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(my_file_sink_sptr self, long max_output_buffer)
        set_max_output_buffer(my_file_sink_sptr self, int port, long max_output_buffer)
        """
        return _guyu_swig.my_file_sink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(my_file_sink_sptr self, int i) -> long"""
        return _guyu_swig.my_file_sink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(my_file_sink_sptr self, long min_output_buffer)
        set_min_output_buffer(my_file_sink_sptr self, int port, long min_output_buffer)
        """
        return _guyu_swig.my_file_sink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(my_file_sink_sptr self, int which) -> float
        pc_input_buffers_full(my_file_sink_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_file_sink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(my_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_avg(my_file_sink_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_file_sink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(my_file_sink_sptr self, int which) -> float
        pc_input_buffers_full_var(my_file_sink_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_file_sink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(my_file_sink_sptr self, int which) -> float
        pc_output_buffers_full(my_file_sink_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_file_sink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(my_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_avg(my_file_sink_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_file_sink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(my_file_sink_sptr self, int which) -> float
        pc_output_buffers_full_var(my_file_sink_sptr self) -> pmt_vector_float
        """
        return _guyu_swig.my_file_sink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(my_file_sink_sptr self) -> float"""
        return _guyu_swig.my_file_sink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(my_file_sink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _guyu_swig.my_file_sink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(my_file_sink_sptr self)"""
        return _guyu_swig.my_file_sink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(my_file_sink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _guyu_swig.my_file_sink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(my_file_sink_sptr self) -> int"""
        return _guyu_swig.my_file_sink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(my_file_sink_sptr self) -> int"""
        return _guyu_swig.my_file_sink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(my_file_sink_sptr self, int priority) -> int"""
        return _guyu_swig.my_file_sink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(my_file_sink_sptr self) -> std::string"""
        return _guyu_swig.my_file_sink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(my_file_sink_sptr self) -> std::string"""
        return _guyu_swig.my_file_sink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(my_file_sink_sptr self) -> io_signature_sptr"""
        return _guyu_swig.my_file_sink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(my_file_sink_sptr self) -> io_signature_sptr"""
        return _guyu_swig.my_file_sink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(my_file_sink_sptr self) -> long"""
        return _guyu_swig.my_file_sink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(my_file_sink_sptr self) -> basic_block_sptr"""
        return _guyu_swig.my_file_sink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(my_file_sink_sptr self, int ninputs, int noutputs) -> bool"""
        return _guyu_swig.my_file_sink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(my_file_sink_sptr self) -> std::string"""
        return _guyu_swig.my_file_sink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(my_file_sink_sptr self, std::string name)"""
        return _guyu_swig.my_file_sink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(my_file_sink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _guyu_swig.my_file_sink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(my_file_sink_sptr self) -> swig_int_ptr"""
        return _guyu_swig.my_file_sink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(my_file_sink_sptr self) -> swig_int_ptr"""
        return _guyu_swig.my_file_sink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(my_file_sink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _guyu_swig.my_file_sink_sptr_message_subscribers(self, which_port)

my_file_sink_sptr_swigregister = _guyu_swig.my_file_sink_sptr_swigregister
my_file_sink_sptr_swigregister(my_file_sink_sptr)


my_file_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
my_file_sink = my_file_sink.make;



